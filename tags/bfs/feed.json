{"version":"https://jsonfeed.org/version/1.1","title":"BFS - 标签 | 菠菜眾長","description":"Hugo FixIt 作者，喜欢瞎折腾、造轮子、写东西，分享一些前端开发中的所见、所闻、所思。","home_page_url":"https://lruihao.cn/","language":"zh-CN","icon":"https://lruihao.cn/apple-touch-icon.png","favicon":"https://lruihao.cn/favicon.ico","authors":[{"name":"Lruihao","url":"https://github.com/Lruihao","avatar":"https://lruihao.cn/images/avatar.jpg"}],"items":[{"title":"POJ-3278-Catch That Cow(bfs)","date_published":"2018-07-22T12:10:32&#43;08:00","date_modified":"2023-11-17T20:39:48&#43;08:00","id":"https://lruihao.cn/posts/poj-3278/","url":"https://lruihao.cn/posts/poj-3278/","authors":[{"name":"Lruihao","url":"https://github.com/Lruihao","avatar":"https://gravatar.loli.net/avatar/fee47a2f4f2cc71f99a02b0a73ecfee0?s=32&amp;d=mp"}],"tags":["BFS","ACM","搜索","POJ","C++"],"summary":"Farmer John has been informed of the location of a fugitive cow and wants to catch her immediately. He starts at a point N (0 ≤ N ≤ 100,000) on a number line and the cow is at a point K (0 ≤ K ≤ 100,000) on the same number line. Farmer John has two modes of transportation: walking and teleporting.\nWalking: FJ can move from any point X to the points X\u0026quot;,\u0026ldquo;1 or X + 1 in a single minute Teleporting: FJ can move from any point X to the point 2 × X in a single minute. If the cow, unaware of its pursuit, does not move at all, how long does it take for Farmer John to retrieve it?\n1 Input Line 1: Two space-separated integers: N and K\n","content_html":"\u003cp\u003eFarmer John has been informed of the location of a fugitive cow and wants to catch her immediately. He starts at a point N (0 ≤ N ≤ 100,000) on a number line and the cow is at a point K (0 ≤ K ≤ 100,000) on the same number line. Farmer John has two modes of transportation: walking and teleporting.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWalking: FJ can move from any point X to the points X\u0026quot;,\u0026ldquo;1 or X + 1 in a single minute\u003c/li\u003e\n\u003cli\u003eTeleporting: FJ can move from any point X to the point 2 × X in a single minute.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf the cow, unaware of its pursuit, does not move at all, how long does it take for Farmer John to retrieve it?\u003c/p\u003e\n\u003ch2 id=\"input\" class=\"heading-element\"\u003e\u003cspan\u003e1 Input\u003c/span\u003e\n  \u003ca href=\"#input\" class=\"heading-mark\"\u003e\n    \u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n  \u003c/a\u003e\n\u003c/h2\u003e\u003cp\u003eLine 1: Two space-separated integers: N and K\u003c/p\u003e"},{"title":"poj-2251-Dungeon Master（三维 bfs 最短路）","date_published":"2018-07-22T12:02:32&#43;08:00","date_modified":"2018-07-22T12:02:32&#43;08:00","id":"https://lruihao.cn/posts/poj-2251/","url":"https://lruihao.cn/posts/poj-2251/","authors":[{"name":"Lruihao","url":"https://github.com/Lruihao","avatar":"https://gravatar.loli.net/avatar/fee47a2f4f2cc71f99a02b0a73ecfee0?s=32&amp;d=mp"}],"tags":["BFS","ACM","搜索","POJ","C++","C"],"summary":"英文原题链接\n1 Description - 题目描述 你被困在一个三维的空间中，现在要寻找最短路径逃生！\n空间由立方体单位构成\n你每次向上下前后左右移动一个单位需要一分钟\n你不能对角线移动并且四周封闭\n是否存在逃出生天的可能性？如果存在，则需要多少时间？\n","content_html":"\u003cp\u003e\u003ca href=\"http://poj.org/problem?id=2251\"target=\"_blank\" rel=\"external nofollow noopener noreferrer\"\u003e英文原题链接\u003ci class=\"fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"description---题目描述\" class=\"heading-element\"\u003e\u003cspan\u003e1 Description - 题目描述\u003c/span\u003e\n  \u003ca href=\"#description---%e9%a2%98%e7%9b%ae%e6%8f%8f%e8%bf%b0\" class=\"heading-mark\"\u003e\n    \u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n  \u003c/a\u003e\n\u003c/h2\u003e\u003cp\u003e你被困在一个三维的空间中，现在要寻找最短路径逃生！\u003cbr\u003e\n空间由立方体单位构成\u003cbr\u003e\n你每次向上下前后左右移动一个单位需要一分钟\u003cbr\u003e\n你不能对角线移动并且四周封闭\u003cbr\u003e\n是否存在逃出生天的可能性？如果存在，则需要多少时间？\u003c/p\u003e"},{"title":"poj-3984-迷宫问题 (bfs 路径）","date_published":"2018-07-22T11:50:20&#43;08:00","date_modified":"2018-07-22T11:50:20&#43;08:00","id":"https://lruihao.cn/posts/poj-3984/","url":"https://lruihao.cn/posts/poj-3984/","authors":[{"name":"Lruihao","url":"https://github.com/Lruihao","avatar":"https://gravatar.loli.net/avatar/fee47a2f4f2cc71f99a02b0a73ecfee0?s=32&amp;d=mp"}],"tags":["BFS","ACM","POJ","C++","C"],"summary":"迷宫问题\nTime Limit: 1000MS Memory Limit: 65536K\nTotal Submissions: 32323 Accepted: 18471\n1 Description 定义一个二维数组：\nint maze[5][5] = { 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, }; 它表示一个迷宫，其中的 1 表示墙壁，0 表示可以走的路，只能横着走或竖着走，不能斜着走，要求编程序找出从左上角到右下角的最短路线。\n","content_html":"\u003cp\u003e\u003ca href=\"http://poj.org/problem?id=3984\"target=\"_blank\" rel=\"external nofollow noopener noreferrer\"\u003e迷宫问题\u003ci class=\"fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary\" aria-hidden=\"true\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eTime Limit: 1000MS Memory Limit: 65536K\u003cbr\u003e\nTotal Submissions: 32323 Accepted: 18471\u003c/p\u003e\n\u003ch2 id=\"description\" class=\"heading-element\"\u003e\u003cspan\u003e1 Description\u003c/span\u003e\n  \u003ca href=\"#description\" class=\"heading-mark\"\u003e\n    \u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n  \u003c/a\u003e\n\u003c/h2\u003e\u003cp\u003e定义一个二维数组：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eint maze[5][5] = {\n  0, 1, 0, 0, 0,\n  0, 1, 0, 1, 0,\n  0, 0, 0, 0, 0,\n  0, 1, 1, 1, 0,\n  0, 0, 0, 1, 0,\n};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e它表示一个迷宫，其中的 1 表示墙壁，0 表示可以走的路，只能横着走或竖着走，不能斜着走，要求编程序找出从左上角到右下角的最短路线。\u003c/p\u003e"},{"title":"BFS 求最短路","date_published":"2018-07-22T11:31:05&#43;08:00","date_modified":"2018-07-22T11:31:05&#43;08:00","id":"https://lruihao.cn/posts/bfs%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF/","url":"https://lruihao.cn/posts/bfs%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF/","authors":[{"name":"Lruihao","url":"https://github.com/Lruihao","avatar":"https://gravatar.loli.net/avatar/fee47a2f4f2cc71f99a02b0a73ecfee0?s=32&amp;d=mp"}],"tags":["BFS","搜索","C++"],"summary":"假设有一个 n 行 m 列的迷宫，每个单位要么是空地（用 1 表示）要么是障碍物（用 0 表示）.\n如和找到从起点到终点的最短路径？利用 BFS 搜索，逐步计算出每个节点到起点的最短距离，\n以及最短路径每个节点的前一个节点。最终将生成一颗以起点为根的 BFS 树。此时 BFS 可以求出任意一点到起点的距离。\n","content_html":"\u003cp\u003e假设有一个 n 行 m 列的迷宫，每个单位要么是空地（用 1 表示）要么是障碍物（用 0 表示）.\u003cbr\u003e\n如和找到从起点到终点的最短路径？利用 BFS 搜索，逐步计算出每个节点到起点的最短距离，\u003cbr\u003e\n以及最短路径每个节点的前一个节点。最终将生成一颗以起点为根的 BFS 树。此时 BFS 可以求出任意一点到起点的距离。\u003c/p\u003e"},{"title":"深搜广搜","date_published":"2018-07-22T11:25:14&#43;08:00","date_modified":"2023-11-17T20:39:48&#43;08:00","id":"https://lruihao.cn/posts/dfs_bfs/","url":"https://lruihao.cn/posts/dfs_bfs/","authors":[{"name":"Lruihao","url":"https://github.com/Lruihao","avatar":"https://gravatar.loli.net/avatar/fee47a2f4f2cc71f99a02b0a73ecfee0?s=32&amp;d=mp"}],"tags":["ACM","BFS","DFS","搜索","C","C++"],"summary":"0.1 广度优先搜索（BFS） 广度优先搜索在进一步遍历图中顶点之前，先访问当前顶点的所有邻接结点。访问了就入队。\n0.2 深度优先搜索（DFS） 深度优先搜索在搜索过程中访问某个顶点后，需要递归地访问此顶点的所有未访问过的相邻顶点。\n","content_html":"\u003ch3 id=\"广度优先搜索bfs\" class=\"heading-element\"\u003e\u003cspan\u003e0.1 广度优先搜索（BFS）\u003c/span\u003e\n  \u003ca href=\"#%e5%b9%bf%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2bfs\" class=\"heading-mark\"\u003e\n    \u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n  \u003c/a\u003e\n\u003c/h3\u003e\u003cp\u003e广度优先搜索在进一步遍历图中顶点之前，先访问当前顶点的所有邻接结点。访问了就入队。\u003c/p\u003e\n\u003ch3 id=\"深度优先搜索dfs\" class=\"heading-element\"\u003e\u003cspan\u003e0.2 深度优先搜索（DFS）\u003c/span\u003e\n  \u003ca href=\"#%e6%b7%b1%e5%ba%a6%e4%bc%98%e5%85%88%e6%90%9c%e7%b4%a2dfs\" class=\"heading-mark\"\u003e\n    \u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n  \u003c/a\u003e\n\u003c/h3\u003e\u003cp\u003e深度优先搜索在搜索过程中访问某个顶点后，需要递归地访问此顶点的所有未访问过的相邻顶点。\u003c/p\u003e"}]}